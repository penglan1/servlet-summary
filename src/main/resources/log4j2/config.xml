<?xml version="1.0" encoding="UTF-8" ?>
<!--
    status: 日志信息打印级别
        日志级别从低到高：TRACE < DEBUG < INFO < WARN < ERROR < FATAL
    monitorinterval: 为log4j 2.x新特点自动重载配置。指定自动重新配置的监测间隔时间，单位是s,最小是5s。如果不配置则不会动态刷新
 -->
<Configuration status="WARN">

    <!--定义一个变量，便于修改-->
    <properties>
        <!--使用的是相对路径，相对于java.exe启动的时的工作目录-->
        <property name="LOG_HOME">logs/servlet-summary</property>
    </properties>
    <!--
        Appenders标签: 管理日志的输出目的
            Console标签: 输出到控制台
            File标签: 输出到文件
                fileName.属性：指定当前日志文件的位置和文件名称
                append: 值为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true。
                        （小技巧：设置为false时，用来临时调试比较好）

            RollingFile标签: 同样是输出到文件，一旦文件超过指定大小将自动删除旧的创建新的的Appender
            RollingRandomAccessFile标签: 更高级的输出到文件
                filePattern属性：指定当发生Rolling时，文件的转移和重命名规则
                SizeBasedTriggeringPolicy标签：指定当文件体积大于size指定的值时，触发Rolling
                DefaultRolloverStrategy标签：指定最多保存的文件个数
                TimeBasedTriggeringPolicy标签：这个配置需要和filePattern结合使用，EG: filePattern中配置的文件重命名规则
                                              是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟，
                                              TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。
                                              如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件。在此处
                                              的是每个月。

    注意：为了防止输出到文件时的日志中有中文乱码，需要指定编码方式，如果未指定编码，则会默认使用平台的编码来输出。

    -->
    <Appenders>
        <Console name="console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        </Console>

        <File name="debugFile" fileName="${LOG_HOME}/debug/debug.log" append="false">
            <PatternLayout charset="UTF-8" pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <RollingRandomAccessFile name="traceFile" fileName="${LOG_HOME}/trace/trace.log"
                                 filePattern="logs/trace/trace-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout charset="UTF-8" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <Policies>
                <TimeBasedTriggeringPolicy interval="10" />
                <SizeBasedTriggeringPolicy size="10MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>

        <RollingRandomAccessFile name="errorFile" fileName="${LOG_HOME}/error/error.log"
                                 filePattern="logs/error/error-%d{yyyy-MM-dd}-%i.log">
            <PatternLayout charset="UTF-8" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
            <Policies>
                <SizeBasedTriggeringPolicy size="10MB" />
            </Policies>
            <DefaultRolloverStrategy max="20" />
        </RollingRandomAccessFile>
    </Appenders>

    <!--
        Loggers标签: 管理等待被使用的日志
            Root标签：用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
            Logger标签：用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
                additivity属性: 值为"false"表示在该logger中输出的日志不会再延伸到父层logger。
                               这里如果改为true，则会延伸到Root Logger，遵循Root Logger的配置也输出一次
        注意: Appender只有在Loggers中被引用了才会生效
    -->
    <Loggers>
        <Logger name="console" level="TRACE" additivity="true">
            <AppenderRef ref="console" />
            <!-- ... -->
        </Logger>

        <Logger name="debug" level="DEBUG" additivity="true">
            <AppenderRef ref="debugFile" />
        </Logger>

        <Logger name="error" level="ERROR" additivity="true">
            <AppenderRef ref="errorFile" />
        </Logger>

        <Root level="ALL">
            <AppenderRef ref="traceFile" />
        </Root>
    </Loggers>
</Configuration>